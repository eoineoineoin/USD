#usda 1.0
(
    customLayerData = {
        dictionary cameraSettings = {
            dictionary Front = {
                double3 position = (50750.000000000015, -1.1268763699945339e-11, 0)
                double radius = 500
            }
            dictionary Perspective = {
                double3 position = (2019.300472363959, 2019.300472363959, 2064.8004723639588)
                double3 target = (0, 0, 45.5)
            }
            dictionary Right = {
                double3 position = (0, -50750, -1.1268763699945339e-11)
                double radius = 500
            }
            dictionary Top = {
                double3 position = (0, 0, 50101)
                double radius = 500
            }
            string boundCamera = "/OmniverseKit_Persp"
        }
        dictionary renderSettings = {
        }
    }
    defaultPrim = "World"
    endTimeCode = 100
    kilogramsPerUnit = 1
    metersPerUnit = 0.01
    startTimeCode = 0
    timeCodesPerSecond = 24
    upAxis = "Z"
)

def Xform "World"
{
    def PhysicsScene "PhysicsScene"
    {
    }

    def Cube "Box1" (
        prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsRigidBodyAPI"]
    )
    {
        color3f[] primvars:displayColor = [(0.2784314, 0.4117647, 1)]
        double size = 25
        double3 xformOp:translate = (0, 0, 50)
        uniform token[] xformOpOrder = ["xformOp:translate"]
    }

    def Cube "Box2" (
        prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsRigidBodyAPI"]
    )
    {
        color3f[] primvars:displayColor = [(0.2784314, 0.4117647, 1)]
        double size = 25
        double3 xformOp:translate = (0, 0, 100)
        uniform token[] xformOpOrder = ["xformOp:translate"]
    }

    def Cube "Ground" (
        prepend apiSchemas = ["PhysicsCollisionAPI"]
    )
    {
        color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
        float3 xformOp:scale = (750, 750, 10)
        uniform token[] xformOpOrder = ["xformOp:scale"]
    }

    def PhysicsCollisionGroup "OtherGroup" (
        prepend apiSchemas = ["CollectionAPI:colliders"]
    )
    {
        prepend rel collection:colliders:includes = [
            </World/Box2>,
            </World/Ground>,
        ]
        prepend rel physics:filteredGroups = </World/OtherGroup>
        string physics:mergeGroup = "TestGroupMerging"
    }

    def PhysicsCollisionGroup "DynamicGroup" (
        prepend apiSchemas = ["CollectionAPI:colliders"]
    )
    {
        prepend rel collection:colliders:includes = [
            </World/Box1>,
            </World/Box2>,
        ]
        prepend rel physics:filteredGroups = </World/DynamicGroup>
        string physics:mergeGroup = "TestGroupMerging"
    }

    def SphereLight "SphereLight"
    {
        float intensity = 30000
        float radius = 150
        double3 xformOp:translate = (650, 0, 1150)
        uniform token[] xformOpOrder = ["xformOp:translate"]
    }
}

